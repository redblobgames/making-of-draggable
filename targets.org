#+title: Draggable objects, different types
#+date: <2023-01-04>
#+nocomments: t

#+begin_aside
On the main page I test different event handlers. On this page I test dragging /different kinds of things/.
#+end_aside

Things to try with a mouse:

- Drag outside the diagram, and come back {should still be dragging}
- Drag outside the diagram, and let go of the mouse button, then come back into the diagram {should stop dragging}
- Drag outside the window, then let go of the mouse button {should stop dragging}
- Right click on the circle {should not drag, but bring up the context menu}
- Right button drag the circle {should not drag, but bring up the context menu on Mac or Linux, or do nothing on Windows}

- Drag with the middle button {should not drag, but enable autoscroll}
- Drag with the left button, then hold down right button, continue drag, then release left button, then move mouse, then release right button {should stop dragging when releasing left button; I want a different behavior from [[http://wpt.live/pointerevents/pointerevent_pointercapture-not-lost-in-chorded-buttons.html][this test]]}
- Chords¹: drag with the left button, then hold down Ctrl, then release the left button {Mac/Firefox behaves differently, giving =pointerdown.left= and then =pointerup.right= whereas other browsers give =pointerdown.left= and =pointerup.left=}
- While dragging, Alt+Tab (Cmd+Tab) to switch windows, then let go of the mouse button {should stop dragging}
- While dragging, use keyboard to scroll {should still be dragging² ⁵}
- While dragging, use scrollwheel to scroll {should still be dragging²}
- While dragging, use middle button to scroll {should still be dragging²}
- While dragging, resize the window {should still be dragging²}
- Select all text on page, then drag the circle {should drag the circle, not the text}
- Plug in two mice, start dragging on one, click on the other {want this to continue dragging, but it won't³}
- On Mac, use an iPad as a second screen, drag with stylus on a mac browser {should drag}
- While dragging, put the computer to sleep and then wake it up and continue the drag {??}
- While dragging, unplug the mouse and plug it back in {??}

Things to try with touch:

- Drag the circle up or down {should not scroll the page}
- Drag the diagram up or down {should scroll the page}
- Long press on the circle {should not select the text or bring up a menu}
- Use two separate fingers to drag two separate objects {should both drag independently}

- Use two separate fingers to drag one object {should only drag with the first finger⁴}
- Drag with one finger then try to pinch zoom with a second finger {should not zoom}
- Drag with one finger then try to pinch zoom with two other fingers {does not zoom, not sure what it should do}
- Drag with one finger then rotate the phone {will rotate and continue dragging on iOS; will not rotate on Android}
- On iPad, use Mac "continuity" to drag with the mouse on an ipad browser {should drag}

Notes:

- ¹solution [[http://wpt.live/pointerevents/pointerevent_pointermove_on_chorded_mouse_button.html][based on pointermove getting called for button changes]]
- ²it won't update until you nudge the mouse pointer
- ³this is a limitation of the OS level mouse handling
- ⁴I have a solution but rarely use it
- ⁵Firefox will fire =mouseover=, =mouseenter= whereas Chrome will fire =pointerover=, =pointerenter=, =mouseover=, =mouseenter=. There are a lot of differences in over/enter events but I haven't investigated them yet.

* SVG single element
:PROPERTIES:
:CUSTOM_ID: svg-single-element
:END:

#+begin_export html
<figure class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
    <circle class="draggable" stroke="black" stroke-width="0.5" r="30" />
  </svg>
  <figcaption>Draggable circle</figcaption>
  <button>Reset</button>
</figure>
#+end_export

- Basic tests work
- On desktop, scrolling while dragging doesn't drag until you move your mouse a tiny amount. This could be solved either with a timer or by catching the scroll event. Low priority for me.

* SVG nested element with text
:PROPERTIES:
:CUSTOM_ID: svg-nested-element-with-text
:END:

#+begin_export html
<figure class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
    <g class="draggable">
      <circle stroke="black" stroke-width="0.5" r="30" />
      <g font-size="16" text-anchor="middle" fill="white">
        <text dy="0.0em">Drag</text>
        <text dy="1.0em">me</text>
      </g>
    </g>
  </svg>
  <figcaption>Draggable circle + text</figcaption>
  <button>Reset</button>
</figure>
#+end_export

- I use pointer capture on =currentTarget= not =target=. 
- While dragging, I set CSS ~user-select: none~. This prevents selecting the text by dragging or double clicking (desktop) or long press (mobile). But I don't want this /all/ the time. When not dragging, I want the text to be selectable.
- On desktop, if you select the text of the page and then try to drag it, it will let you drag that text outside the browser. But if you also try to drag this circle the two drag handlers will intefere. Use ~preventDefault()~ on the =dragstart= event to fix this.

* Canvas drawing
:PROPERTIES:
:CUSTOM_ID: canvas-drag-to-draw
:END:

The same drag event handlers can be used for drawing instead of moving an object:

#+begin_export html
<figure class="w-full">
  <canvas width="660" height="100" style="cursor:crosshair"/>
  <figcaption>Drag to draw on the canvas</figcaption>
</figure>
#+end_export

* Canvas dragging
:PROPERTIES:
:CUSTOM_ID: canvas-drag-a-handle
:END:

#+begin_export html
<figure class="w-full">
  <canvas width="1000" height="150" />
  <figcaption>Drag the circle to move it</figcaption>
  <button>Reset</button>
</figure>
#+end_export

- ⁴if I put a second finger on the diagram it had been jumping to the second finger's position. This is because the /same/ is getting the =pointermove= event for the second finger, whereas in the other demos a /different/ element gets the events for the second finger. To fix this, I checked the =.pointerId= field in the =pointermove= event to make sure it matches the =.pointerId= from the =pointerdown= event.

* HTML div absolute positioned
:PROPERTIES:
:CUSTOM_ID: html-div-absolute-positioned
:END:

#+begin_export html
<figure class="w-full">
  <div class="diagram" style="position:relative;width:100%;height:100px">
    <div class="draggable" style="position:absolute;width:5em;height:1.5em">Drag me</div>
  </div>
  <figcaption>Drag the box to move it</figcaption>
  <button>Reset</button>
</figure>
#+end_export

- It is possible to place the box outside the container by placing it on the right, then shrinking the browser size. I'm going to leave this up to the application and not try to solve it generically.

* HTML div css transform
:PROPERTIES:
:CUSTOM_ID: html-div-css-transform
:END:

#+begin_export html
<figure class="w-full">
  <div class="diagram" style="position:relative;width:100%;height:100px">
    <div class="draggable" style="transform:translate(0px,0px);width:5em;height:1.5em">Drag me</div>
  </div>
  <figcaption>Drag the box to move it</figcaption>
  <button>Reset</button>
</figure>
#+end_export


* HTML div with a link
:PROPERTIES:
:CUSTOM_ID: html-with-link
:END:

#+begin_export html
<figure class="w-full">
  <div class="diagram" style="position:relative;width:100%;height:100px">
    <div class="draggable" style="position:absolute;width:10em;height:2.5em">abc 
<a href="/" style="color:unset;text-decoration:underline">LINK</a> xyz</div>
  </div>
  <figcaption>Try left, middle, right clicking the link</figcaption>
  <button>Reset</button>
</figure>
#+end_export

- The dragging code intercepts the left button so you can't click on the link.
- You can still middle click or right click on the link.

However in this demo you can click the link or drag with it:

#+begin_export html
<figure class="w-full">
  <div class="diagram" style="position:relative;width:100%;height:100px">
    <div class="draggable" style="position:absolute;width:10em;height:2.5em">abc 
<a href="/" style="color:unset;text-decoration:underline">LINK</a> xyz</div>
  </div>
  <figcaption>Now try clicking the link</figcaption>
  <button>Reset</button>
</figure>
#+end_export

This was a little tricky and I don't know if it handles all cases but:

- on =pointerdown=, /don't/ capture; instead, set a flag ~moved=false~
- on =pointermove=, if =moved= is still =false=, capture
- on =pointermove=, set ~moved=true~
- on =click=, if =moved= is =true=, =event.preventDefault()=

In general though I don't try to do this type of thing. I don't put links inside my draggable objects.

* Draggable with a nested draggable
:PROPERTIES:
:CUSTOM_ID: nested-draggable
:END:

I don't have a test here but I wrote [[https://sfc.vuejs.org/#eNq1VU1zmzAQ/StbJjPYUxs7V+p02mkvveXQQzLDIdisQSlIGknYUMp/7wpBCo4b99M+oH37Vuy+XaTGey9lcCjRC72N3ikmDWg0pXwbcVZIoQw0oHAPLeyVKMAnqh/xiO8E1wYquLHe2Xo+IPUz5MgSk/Xo9foHniFLMzNxDK5ExSk5mohDt04ZT0PYx7nGhcWkYNygSsSRz/CA3MwdF8BkTAdDiN0iqUKogkOclwhL6MjBLmf0uFtAUodQn3Xet2/chj1YKkXPz7FK0QQk0K3L4EMsTanQJRH0aX1K5l1wO861lBcy7ap7HleIQ7/9UyTbw+zVJHxOGlIevM95qPdmWi+8nr40SKo+YNBgGnD/PKB+SrAdeqVQs6829J906xi6eflpx7KwH5z/1rYhWBshb5WQcRobJvjs75r6G7v+Sctf2hwmkl4cimMfNJH54mRk48nYrNxRQocIGQYLmccGyQLYJOwAoTZ1jjeR1xgVc70XqgjhoVtb4uyqqVpZLa6amh7zh4UrgChXTbcilECXYIe6pYO38e5LqkTJkxD8GvNcHP0F+KVGtdSY48745OCCI8FSaGalIkQhvZsdLEpzo4UizLbCbyPPKUK/d6NhDnLcGyrCijAMkcXP0Et5wivlGZZ92wnPQiNmJyHAR3s+FgiNk+Pbum3vml4EazjWidSjUuOtFnlpbKnKaeivab0VxgjqRGf0kvvXa1mROYg92BOVFSZj1fhR49KdCxfFc7RfkW/KfEnAKfNEwicRNyvSx81kv9qsRqPq/t7Cc9fgsohl8KgFp4uy+yij3qEjLxw+08ij69HakZcZI3W4Wun9zl6vjzoQKl3RKlAlN6zAAHWx3CpBWina2GVInWu99ju1AZkh][one on another site]], where both the yellow and red boxes are draggable. To handle this case:

- use =stopPropagation()= to prevent the pointer event from going up to the parent element

* Scrubbable number
:PROPERTIES:
:CUSTOM_ID: scrubbable-number
:END:

On some of my pages, like [[href:/articles/probability/damage-rolls.html][Probability of Damage Rolls]], I have some numbers in the text of the page, and those numbers are "scrubbable". The reader can drag them left/right to change the value. I want to be able to handle that with the same dragging code that I use for dragging objects.

#+begin_export html
<figure>
  <input id="input-scrubbable-number" pattern="[0-9]+" />
  <figcaption>Scrubbable number can be dragged left/right to set the value</figcaption>
</figure>
#+end_export

It's a constrained drag. I ignore the =y= value from the drag. But the object doesn't actually move around on the screen. The =x= value is displayed as text instead of being used to set the position. This example, and those on [[href:/articles/curved-paths/making-of.html][my constrained dragging page]], show how the same basic recipe can be used for a wide variety of situations.

* Painting state
:PROPERTIES:
:CUSTOM_ID: painting-state
:END:

I don't have a demo here but look at [[href:/x/1825-rounded-cell-painter/][Painting on a map]], where the /initial/ =pointerdown= event remembers what color we're painting, and then all subsequent =pointermove= events paint in that color. If you first painted in blue, then you continue painting in blue until the =pointerup=.

* Notes
:PROPERTIES:
:CUSTOM_ID: notes
:END:

/None/ of these handle CSS transforms on the parent elements. This is an unsolved issue, not only for me, but also other libraries like d3.js. See https://github.com/d3/d3-selection/issues/67  and https://bugzilla.mozilla.org/show_bug.cgi?id=1610093 . There's probably /something/ we can do using =window.getComputedStyle(element)= but this is a low priority for me, as I almost never use css transforms above a draggable element.

#+begin_export html
<style>
  svg, canvas, div.diagram { background: #eee; box-shadow: 0 1px 3px 1px rgba(0,0,0,0.3); width: 100%; }

  .draggable { cursor: grab; }
  .dragging { cursor: grabbing; user-select: none; }

  circle.draggable, .draggable circle { fill: hsl(0 50% 50%); }
  circle.draggable.dragging, .dragging circle { fill: hsl(200 50% 50%); }
  div.draggable { background: hsl(0 50% 50%); color: white; }
  div.draggable.dragging { background: hsl(200 50% 50%); }

  circle.captured, .captured circle { stroke: hsl(200 100% 70%); stroke-width: 2px; }
  div.captured { border: 2px solid hsl(200 100% 70%); }

  #input-scrubbable-number {
     font-size: 100%;
     width: 3em;
     border: none;
     border-bottom: 1px dashed hsl(0 50% 45%);
     background: hsl(60 10% 95%);
     text-align: center;
     cursor: ew-resize;
     user-select: none;
  }
  #input-scrubbable-number:hover {
     background: hsl(30 50% 90%);
  }
  #input-scrubbable-number:focus-visible {
     background: hsl(0 50% 90%);
     outline: none;
  }

</style>

<x:footer>
  <svg width="0" height="0">
    <defs>
      <pattern id="pattern-dots" width="10" height="10" patternUnits="userSpaceOnUse">
        <circle cx="5" cy="5" fill="hsl(0 10% 80%)" r="1" />
      </pattern>
    </defs>
  </svg>
  <script src="targets.js"></script>
</x:footer>
#+end_export
