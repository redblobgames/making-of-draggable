#+title: Draggable objects, different types
#+date: <2023-01-04>
#+nocomments: t

#+begin_aside
On the main page I test different event handlers. On this page I test dragging /different kinds of things/.
#+end_aside

Things to try with a mouse:

- Drag outside the diagram, and come back {should still be dragging}
- Drag outside the diagram, and let go of the mouse button, then come back into the diagram {should stop dragging}
- Drag outside the window, then let go of the mouse button {should stop dragging}
- Right click on the circle {should not drag, but bring up the context menu}
- Right button drag the circle {should not drag, but bring up the context menu on Mac or Linux, or do nothing on Windows}

- Drag with the middle button {should not drag, but enable autoscroll}
- Drag with the left button, then hold down right button, continue drag, then release left button, then move mouse, then release right button {should stop dragging when releasing left button; I want a different behavior from [[http://wpt.live/pointerevents/pointerevent_pointercapture-not-lost-in-chorded-buttons.html][this test]]}
- Chords¹: drag with the left button, then hold down Ctrl, then release the left button {Mac/Firefox behaves differently, giving =pointerdown.left= and then =pointerup.right= whereas other browsers give =pointerdown.left= and =pointerup.left=}
- While dragging, Alt+Tab (Cmd+Tab) to switch windows, then let go of the mouse button {should stop dragging}
- While dragging, use keyboard to scroll {should still be dragging² ⁵}
- While dragging, use scrollwheel to scroll {should still be dragging²}
- While dragging, use middle button to scroll {should still be dragging²}
- While dragging, resize the window {should still be dragging²}
- Select all text on page, then drag the circle {should drag the circle, not the text}
- Plug in two mice, start dragging on one, click on the other {want this to continue dragging, but it won't³}
- On Mac, use an iPad as a second screen, drag with stylus on a mac browser {should drag}
- While dragging, put the computer to sleep and then wake it up and continue the drag {??}
- While dragging, unplug the mouse and plug it back in {??}

Things to try with touch:

- Drag the circle up or down {should not scroll the page}
- Drag the diagram up or down {should scroll the page}
- Long press on the circle {should not select the text or bring up a menu}
- Use two separate fingers to drag two separate objects {should both drag independently}

- Use two separate fingers to drag one object {should only drag with the first finger⁴}
- Drag with one finger then try to pinch zoom with a second finger {should not zoom}
- Drag with one finger then try to pinch zoom with two other fingers {does not zoom, not sure what it should do}
- Drag with one finger then rotate the phone {will rotate and continue dragging on iOS; will not rotate on Android}
- On iPad, use Mac "continuity" to drag with the mouse on an ipad browser {should drag}

Notes:

- ¹solution [[http://wpt.live/pointerevents/pointerevent_pointermove_on_chorded_mouse_button.html][based on pointermove getting called for button changes]]
- ²it won't update until you nudge the mouse pointer
- ³this is a limitation of the OS level mouse handling
- ⁴I have a solution but rarely use it
- ⁵Firefox will fire =mouseover=, =mouseenter= whereas Chrome will fire =pointerover=, =pointerenter=, =mouseover=, =mouseenter=. There are a lot of differences in over/enter events but I haven't investigated them yet.

The Webplatform Tests folk [[https://wpt.fyi/results/pointerevents][have run a lot more tests across browsers]], like what happens if you remove an element in the middle of a pointer event.

* HTML div with a link
:PROPERTIES:
:CUSTOM_ID: html-with-link
:END:

#+begin_export html
<figure class="w-full">
  <div class="diagram" style="position:relative;width:100%;height:100px">
    <div class="draggable" style="position:absolute;width:10em;height:2.5em">abc 
<a href="/" target="_blank" style="color:unset;text-decoration:underline">LINK</a> xyz</div>
  </div>
  <figcaption>Try left, middle, right clicking the link</figcaption>
  <button>Reset</button>
</figure>
#+end_export

- The dragging code intercepts the left button so you can't click on the link /in Chrome/, but you can click in Firefox or Safari.
- You can still middle click or right click on the link.

I tweaked the demo so you can click the link in Chrome:

#+begin_export html
<figure class="w-full">
  <div class="diagram" style="position:relative;width:100%;height:100px">
    <div class="draggable" style="position:absolute;width:10em;height:2.5em">abc 
<a href="/" target="_blank" style="color:unset;text-decoration:underline">LINK</a> xyz</div>
  </div>
  <figcaption>Now try clicking the link</figcaption>
  <button>Reset</button>
</figure>
#+end_export

This was a little tricky and I don't know if it handles all cases but:

- on =pointerdown=, /don't/ capture; instead, set a flag ~moved=false~
- on =pointermove=, if =moved= is still =false=, capture
- on =pointermove=, set ~moved=true~
- on =click=, if =moved= is =true=, =event.preventDefault()=

In general though I don't try to do this type of thing. I don't put links inside my draggable objects.

* Click events
:PROPERTIES:
:CUSTOM_ID: click-events
:END:

[[https://stackoverflow.com/questions/76074036/using-w3c-pointerevent-api-and-be-able-to-detect-a-double-click][This stackoverflow question]] made me wonder what happens when we have both click and drag event handlers on the same object. The idea here is to listen to both types of events. If we detect a =pointermove=, then don't process the =click=. Maybe it needs to have some threshold of how many pixels we moved before we suppress the click. I also wrote up a full demo on the stackoverflow page.

#+begin_export html
<figure class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
    <g class="draggable">
      <circle stroke="black" stroke-width="0.5" r="30" />
      <g font-size="16" text-anchor="middle" fill="white">
        <text dy="0.0em">Click or</text>
        <text dy="1.0em">drag me</text>
      </g>
    </g>
  </svg>
  <figcaption>Draggable + clickable</figcaption>
  <button>Reset</button>
</figure>
#+end_export

* Coordinate transform on parent
:PROPERTIES:
:CUSTOM_ID: parent-transform
:END:

The draggable element might be inside another element that has a =transform= applied to it.

The problem is that the =eventToSvgCoordinates= function I use calculates coordinates relative
to the =<svg>= element. This is fine if your draggable object is positioned relative to the
=<svg>='s coordinate system, but in this test there's =<svg>= then =<g>= with a =rotate()= on it.
The pointer coordinates are in /screen/ coordinates, and we need to unrotate them if we want
the draggable to be placed within the rotated =<g>=.

#+begin_export html
<figure class="w-full">
  <svg viewBox="-330 -50 660 100">
    <g transform="rotate(20)">
      <rect x="-1000" y="-1000" width="2000" height="2000" fill="url(#pattern-dots)" />
      <rect class="draggable" 
         x="-15" y="-15" width="30" height="30" 
         stroke="black" stroke-width="0.5" />
    </g>
  </svg>
  <figcaption>Draggable inside a transformed SVG element</figcaption>
  <button>Reset</button>
</figure>
#+end_export

To handle this, extend the =eventToSvgCoordinates= function to take an element the coordinate should be relative to, instead of assuming the coordinates should be in the =<svg>='s coordinate space.

#+begin_src js
/** Convert from event coordinate space (on the page) to SVG coordinate
 * space (within the svg, honoring responsive resizing, width/height,
 * and viewBox) */
function eventToSvgCoordinates(event, relativeTo=event.currentTarget.ownerSVGElement) {
    // if relativeTo is the <svg> then its ownerSVGElement is null, so
    // we want to point back to the <svg> but otherwise we assume it's
    // a child of <svg> and we want to find the <svg>
    let p = (relativeTo.ownerSVGElement ?? relativeTo).createSVGPoint();
    p.x = event.clientX;
    p.y = event.clientY;
    return p.matrixTransform(relativeTo.getScreenCTM().inverse());
}
#+end_src

However, this function only handles transforms on the SVG elements. For transforms on non-SVG elements, /I don't know what to do/. This is an unsolved issue, not only for me, but also other libraries like d3.js. See [[https://github.com/d3/d3-selection/issues/67][d3-selection issue #67]]  and [[https://bugzilla.mozilla.org/show_bug.cgi?id=1610093][firefox bug #1610093]] . There's probably /something/ we can do using =window.getComputedStyle(element)= but I haven't tried.


#+begin_export html
<style>
  main svg, main canvas, main div.diagram { 
      background: #eee; 
      box-shadow: 0 1px 3px 1px rgba(0,0,0,0.3); 
      width: 100%; 
  }

  .draggable { cursor: grab; }
  .dragging { cursor: grabbing; user-select: none; }

  main svg .draggable, .draggable circle { fill: hsl(0 50% 50%); }
  main svg .draggable.dragging, .dragging circle { fill: hsl(200 50% 50%); }
  div.draggable { background: hsl(0 50% 50%); color: white; }
  div.draggable.dragging { background: hsl(200 50% 50%); }

  circle.captured, .captured circle { stroke: hsl(200 100% 70%); stroke-width: 2px; }
  div.captured { border: 2px solid hsl(200 100% 70%); }

  #input-scrubbable-number {
     font-size: 125%;
     width: 3em;
     border: none;
     border-bottom: 1px dashed hsl(0 50% 45%);
     background: hsl(60 10% 95%);
     text-align: center;
     cursor: ew-resize;
     user-select: none;
  }
  #input-scrubbable-number:hover {
     background: hsl(30 50% 90%);
  }
  #input-scrubbable-number:focus-visible {
     background: hsl(0 50% 90%);
     outline: none;
  }

</style>

<x:footer>
  <svg width="0" height="0">
    <defs>
      <pattern id="pattern-dots" width="10" height="10" patternUnits="userSpaceOnUse">
        <circle cx="5" cy="5" fill="hsl(0 10% 80%)" r="1" />
      </pattern>
    </defs>
  </svg>
  <script src="targets.js"></script>
</x:footer>
#+end_export
