#+title: Draggable objects
#+date: <2023-12-01 Fri>
#+property: header-args:dot    :cache yes

On the [[href:./][main page]] I show the /event handler recipe/ I use for dragging objects around in my interactive diagrams. That's only handles the /input/. It doesn't draw or move anything. The
@@html:<em style="background:#e6d4c3"> event handler </em>@@
needs to be connected to a 
@@html:<em style="background:#cfd6e6"> state handler </em>@@.  The state handler handles the /output/.

#+begin_src dot :file build/diagram-state-and-event-handlers.svg
digraph Handlers {
  node [
    style="filled"
    color="white"
    fillcolor="0.15 0.02 0.90"
    fontname="monospace"
    fontsize=16
  ]
  edge [color="0.15 0.05 0.75"]
  rankdir = "LR"

  event [
    shape = record
    fillcolor="#e6d4c3"
    label = "<down> pointerdown | <up> pointerup | <move> pointermove";
  ];

  state [
    shape = record
    fillcolor="#cfd6e6"
    label = "translate_coord | <dragging> dragging | <pos> pos";
  ];

  browser -> event;
  event:down -> state:dragging;
  event:up -> state:dragging;
  event:move -> state:pos;
  state -> application_state;
  state -> dom;
}
#+end_src

#+results[e1816d2134fdccada2adc431cd5e745711a2d571]:
[[file:build/diagram-state-and-event-handlers.svg]]

This structure gives me the flexibility I want for my projects. The state handler isn't limited to /dragging/. It can take the drag /events/ and turn them into a numeric display, or a painting program. On this page I'll give examples of these.

*These examples are starting points* using global variables. You'll have to adapt the code to fit into your own project.

#+begin_export html
<show-example name="svg-circle" />
#+end_export

<show-example name="svg-circle-constrained" />

<show-example name="svg-circle-snapping" />

<show-example name="canvas-drag-circle" />

<show-example name="number-scrubbing" />



#+begin_export html
<style>
  show-example { 
    display: block; 
  }
  iframe { 
    display: block; 
    width: 100%;
    border: 0; 
    box-shadow: 0 1px 2px rgba(0 0 0 / 0.5); 
  }

  show-example {
    display: grid;
    width: unset;
    margin-left: 0.5em;
    margin-right: 0.5em;
    grid-template-columns: 5fr 4fr;
    grid-template-rows: auto auto 7em 7em 7em;
    grid-template-areas:
        'title editors'
        'demo demo'
        'state body'
        'state style'
        'state event';
    border-top: 1em solid hsl(var(--hue), 50%, 45%);
  }
  show-example > h3 { grid-area: title; margin: 1em 1em 1em 0; justify-self: end; }
  show-example > iframe { grid-area: demo; width: var(--body-width); justify-self: center; }
  show-example > pre { width: unset; font-size: clamp(0.5rem, 1.2vw, 1rem); border: none; margin: 0.25em; padding: 0.25em; }
  show-example > .state { grid-area: state; background: radial-gradient(circle at left 25% top 25%, oklch(95% 0.0 240), oklch(90% 0.01 240)); }
  show-example > .event { grid-area: event; background: radial-gradient(circle at left 25% top 25%, oklch(95% 0.0 30), oklch(90% 0.01 30)); }
  show-example > .body { grid-area: body; background: radial-gradient(circle at left 25% top 75%, oklch(95% 0.0 310), oklch(95% 0.01 310)); }
  show-example > .style { grid-area: style; background: radial-gradient(circle at left 25% top 25%, oklch(95% 0.0 150), oklch(95% 0.01 150)); }
  show-example > .editors { grid-area: editors; margin-left: 1em; align-self: center; }
  show-example > .editors form { display: inline-block; }

</style>

<style src="prism.css" />

<x:footer>
  <!-- https://prismjs.com/download.html#themes=prism&languages=clike+javascript -->
  <script src="build/prism.js"></script>
  <script type="module" src="examples.js"></script>

  Created Dec 2023
  with the help of
  <a href="https://prismjs.com/">Prism.js</a>; &#160;
  <!-- hhmts start -->Last modified: 21 Dec 2023<!-- hhmts end -->
</x:footer>
#+end_export

