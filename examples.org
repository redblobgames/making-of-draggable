#+title: Draggable objects: examples
#+date: <2023-12-01 Fri>
#+property: header-args:dot    :cache yes
#+draft: t

On the [[href:./][main page]] I show the /event handler recipe/ I use for dragging objects around in my interactive diagrams. That's only handles the /input/. It doesn't draw or move anything. The
@@html:<em style="background:#e6d4c3"> event handler </em>@@
needs to be connected to a 
@@html:<em style="background:#cfd6e6"> state handler </em>@@.  The state handler handles the /output/.

{ TODO: should I hide the code by default, so that it's easy to browse the page and find the example you're most interested in? }

#+begin_src dot :file build/diagram-state-and-event-handlers.svg
digraph Handlers {
  node [
    style="filled"
    color="white"
    fillcolor="0.15 0.02 0.90"
    fontname="monospace"
    fontsize=16
  ]
  edge [color="0.15 0.05 0.75"]
  rankdir = "LR"

  subgraph cluster_0 {
    style="filled"
    color="#f8f4f0"
    event [
      shape = record
      fillcolor="#e6d4c3"
      label = "<down> pointerdown | <up> pointerup | <move> pointermove";
    ];
    event;
    browser -> event;
    label="main page";
  }

  subgraph cluster_1 {
    style="filled"
    color="#f0f4f8"
    state [
      shape = record
      fillcolor="#cfd6e6"
      label = "event to coords | <dragging> dragging | <pos> pos";
    ];
    state -> "application state";
    state -> dom;
    label="examples page";
  }

  event:down -> state:dragging;
  event:up -> state:dragging;
  event:move -> state:pos;
}
#+end_src

#+results[1448242050c1bc0770103c323e50452fdc75dbc4]:
[[file:build/diagram-state-and-event-handlers.svg]]

This structure gives me the flexibility I want for my projects. The state handler isn't limited to /dragging/, or a fixed set of behaviors. This is /unlike/ the design of libraries like jquery-ui-draggable or react-draggable. Those libraries give you a list of possible behaviors like snapping to a grid or constrained movement or using a handle. In my projects the drag event handler is decoupled from the state handling, so you can implement any of those, and more, such as scrubble numbers or a painting program. On this page I'll give examples with code you can use.

*These examples are starting points* using global variables. You'll have to adapt the recipe to fit into your own project.

#+begin_export html
<show-example name="svg-circle">
  Here's a basic state handler that works with the event handler. The position 
  <code>pos</code> has a <em>setter</em> on it that also updates the circle's
  position whenever the position variable is changed. The event handler sets
  the <code>dragging</code> CSS class, which changes the color of the circle
  while it's being dragged.
</show-example>

<show-example name="svg-constrained">
  In this state handler the setter for <code>pos</code> clamps the x and y positions to
  stay within a rectangular area.
</show-example>

<show-example name="svg-snapping">
  In this state handler the setter for <code>pos</code> moves the x,y position to 
  the nearest gray dot. This example also shows how the internal representation
  <code>[x,y]</code> can be different from the external type <code>{x,y}</code>.
</show-example>

<show-example name="div">
  Here's the classic dragging of a <code>&lt;div&gt;</code> by setting its <code>transform</code> CSS property. In this example <code>eventToCoordinates</code> doesn't need to transform the coordinate system. The position is constrained
  to the container <code>&lt;div&gt;</code>. To switch to absolute
  positioning, the <code>set pos()</code> function would change, but
  the event handler code would not.
</show-example>

<show-example name="div-handle">
  There's a lot of flexibility in changing what's draggable separately from how the position is updated. 
  Here's a recreation of one example from <a href="https://react-grid-layout.github.io/react-draggable/example/">React-Draggable</a>. The event handlers connect to the <em>red</em>
  handle, but the state handler updates the position of the <em>white</em> containing box.
</show-example>

<show-example name="number-scrubbing">
  The drag events don't have to involve moving anything.
  This example shows how they can be used for changing the
  number stored in an <code>&lt;input&gt;</code> element.
  I use this type of interaction on my <a href="/articles/probability/damage-rolls.html">Damage Rolls page</a>.
  Since it's a standard element you can change it with
  keyboard/mouse in addition to dragging. However, the standard
  input event has styling and text selection that may interfere
  with dragging, so some people use a <code>&lt;span&gt;</code>
  instead.
</show-example>

<show-example name="canvas-drawing">
  Here's another example of how the drag events don't have
  to move anything. Here we <em>don't</em> want to keep track
  of the initial offset in the pointerdown event. Draw on the canvas:
</show-example>

<show-example name="canvas-drag-circle">
  Here we're not dragging any DOM element. The canvas
  stays in place. But I'm moving a marker that's drawn
  on the canvas. I had to modify the event handler recipe
  to update the cursor whenever anything happened.
</show-example>

<show-example name="svg-painting">
  This example shows multi-state painting. It keeps painting
  with the <em>initial</em> paint color until the pointer up event.
  The event handling in this example differs from the
  standard recipe enough that I don't know if it's really worth 
  keeping the state separate from the events. Each square has
  an event handler, and we <em>release</em> the pointer capture
  so that the pointer move goes to other squares while painting.
  But that also means this doesn't behave properly when moving
  the mouse outside the painting area and then back in.
</show-example>
#+end_export

TODO: more examples I'm considering:

1. snap to grid, like jquery-ui and react-draggable, although this isn't any different from the svg-snapping example in theory
2. invisible larger drag area for mobile (from my little-details page)
3. the drag + resize example from the main page, which needs =stopPropation()=
4. constrain position to a non-rectangular area, like my [[href:/articles/curved-paths/making-of.html][making-of curved-paths page]]
5. some way to cancel a drag with keyboard → probably outside the scope
6. .dragging class options (from little-details page)
7. multiple draggables that are linked somehow, e.g. maybe they share a y but have independent x
8. accessibility? - make the numbers also show up in an input box, or make things draggable by keyboard?

TODO: mark which event handling recipes were modified from the ones presented on the main page; this is why it's a recipe and not a library


#+begin_export html
<style>
  show-example { 
    display: block; 
  }
  iframe { 
    display: block; 
    width: 100%;
    border: 0; 
    box-shadow: 0 1px 2px rgba(0 0 0 / 0.5); 
  }

  show-example {
    display: grid;
    width: unset;
    margin-left: 0.5em;
    margin-right: 0.5em;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto auto auto 7em 7em 7em;
    grid-template-areas:
        'title editors'
        'explanation explanation'
        'demo demo'
        'state body'
        'state style'
        'state event';
    border-top: 1em solid hsl(var(--hue), 50%, 45%);
  }
  show-example > h3 { grid-area: title; margin: 1em 1em 1em 0; justify-self: end; }
  show-example > .explanation { grid-area: explanation; width: var(--body-width); justify-self: center; }
  show-example > iframe { grid-area: demo; width: var(--body-width); justify-self: center; }
  show-example > pre { width: unset; font-size: clamp(0.5rem, 1.2vw, 0.9rem); border: none; margin: 0.25em; padding: 0.25em; }
  show-example > .state { grid-area: state; background: radial-gradient(circle at left 25% top 25%, oklch(95% 0.0 240), oklch(90% 0.01 240)); font-size: clamp(0.5rem, 1.5vw, 1.1rem); }
  show-example > .event { grid-area: event; background: radial-gradient(circle at left 25% top 25%, oklch(95% 0.0 30), oklch(90% 0.01 30)); }
  show-example > .body { grid-area: body; background: radial-gradient(circle at left 25% top 75%, oklch(95% 0.0 310), oklch(95% 0.01 310)); }
  show-example > .style { grid-area: style; background: radial-gradient(circle at left 25% top 25%, oklch(95% 0.0 150), oklch(95% 0.01 150)); }
  show-example > .editors { grid-area: editors; margin-left: 1em; align-self: center; }
  show-example > .editors form { display: inline-block; }

</style>

<style src="prism.css" />

<x:footer>
  <!-- https://prismjs.com/download.html#themes=prism&languages=clike+javascript -->
  <script src="build/prism.js"></script>
  <script type="module" src="examples.js"></script>

  Created Dec 2023
  with the help of
  <a href="https://prismjs.com/">Prism.js</a>; &#160;
  <!-- hhmts start -->Last modified: 20 Feb 2024<!-- hhmts end -->
</x:footer>
#+end_export

