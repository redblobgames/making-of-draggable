#+title: Draggable objects, 2022
#+date: <2022-12-23 Fri>
#+property: header-args:dot    :cache yes
#+options: toc:nil

{{ TODO: need to check for I/we usage }}

Many of my interactive pages have a /draggable object/. I want the reader to move the object around, and I want the diagram to respond in some way. Here I'll document the code I use to make this work with both mouse and touch input, using browser features that are widely supported since 2020.  Here's one of the things I want to support:

#+begin_export html
<figure id="diagram-introduction">
  <svg viewBox="-220 -75 440 150">
    <rect x="-220" y="-75" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Drag the circle with mouse or touch</figcaption>
</figure>
#+end_export

#+toc: headlines 1

This is the simple model in my head:

#+begin_src dot :file build/state.svg :exports results
digraph {
    node [fontname=Helvetica, fontsize=12, shape=circle, style=filled, color="#aaaaaa", fillcolor="#eeeeee"];
    edge [fontname=Courier, fontsize=10, fontcolor="#444422", color="#999999", fillcolor="#ffffff"];
    
    rankdir=LR;
    initial -> dragging [label = "pointerdown"];
    dragging -> dragging [label = "pointermove"];
    dragging -> initial [label = "pointerup"];
}
#+end_src

#+results[991524cd9317998d0e198d7e8dc0bc24adf7e944]:
[[file:build/state.svg]]

However it's not so simple! Mouses have multiple buttons. Touch events can include multiple fingers. Events can go to multiple destinations. Right click can trigger the context menu. I ended up with this basic recipe:

#+begin_export html
<pre data-code="pointer" data-show="capture noscroll left offset"/>
#+end_export

{{ TODO: checkboxes toggling handling of text, nested, edges, canvas, etc. }}

Like other recipes, it's something that works for many cases, but is *meant to be modified*. On the rest of the page I'll show how I got here and then variants of this recipe, including [[#variant-text][how to handle text selection]].

{{ TODO: maybe add demos for canvas drawing, slider, constrained slider, scrubbables }}

I've tested this code on Gecko/Firefox (Mac, Windows, Linux, Android), Blink/Chrome (Mac, Windows, Linux, Android), and WebKit/Safari (Mac, iPhone, iPad). I have /not/ tested on hoverable stylus, hybrid touch+mouse devices, or voice input.

* üñ±Ô∏è Mouse events only
:PROPERTIES:
:CUSTOM_ID: mouse-events
:END:

When I first started implementing interactive diagrams ~20 years ago, touch devices weren't common. I used =mousedown=, =mouseup=, and =mousemove= event handlers on the draggable element. If the move occurs while dragging, move the circle to the mouse position.

#+begin_src dot :file build/mouse-local.svg :exports results
digraph {
    node [fontname=Helvetica, fontsize=12, shape=circle, style=filled, color="#aaaaaa", fillcolor="#eeeeee"];
    edge [fontname=Courier, fontsize=10, fontcolor="#444422", color="#999999", fillcolor="#ffffff"];
    
    rankdir=LR;
    initial -> initial [label = "mousemove"];
    initial -> dragging [label = "mousedown"];
    dragging -> dragging [label = "mousemove"];
    dragging -> initial [label = "mouseup"];
}
#+end_src

#+results[71df718c29f81b2b7fe3ed71be1e8660a77fe531]:
[[file:build/mouse-local.svg]]

#+begin_export html
<pre data-code="mouseLocal" />
#+end_export

*Try* the demo with a mouse:

#+begin_export html
<figure id="diagram-mouse-events-local" class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Drag using mouse events on circle</figcaption>
</figure>
#+end_export

This might seem like it works but it works poorly.

- If you move the pointer quickly it is no longer over the circle, it stops receiving events.
- If you release the button while not on the circle, it will get stuck in the "dragging" state.

To fix these problems use =mousedown= on the circle to add =mousemove= and =mouseup= on the /document/. Then on =mouseup= remove the =mousemove= and =mouseup= from the document.

#+begin_src dot :file build/mouse-document.svg :exports results
digraph {
    node [fontname=Helvetica, fontsize=12, shape=circle, style=filled, color="#aaaaaa", fillcolor="#eeeeee"];
    edge [fontname=Courier, fontsize=10, fontcolor="#444422", color="#999999", fillcolor="#ffffff"];
    
    rankdir=LR;
    initial -> dragging [label = "mousedown"];
    dragging -> dragging [label = "document\nmousemove"];
    dragging -> initial [label = "document\nmouseup"];
}
#+end_src

#+results[1da58aac6eae43ea397f1a1cea38b924ef09bc75]:
[[file:build/mouse-document.svg]]

#+begin_export html
<pre data-code="mouseGlobal" />
#+end_export
Try it out. It works better.

#+begin_export html
<figure id="diagram-mouse-events-document" class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Drag using mouse events on document</figcaption>
</figure>
#+end_export

This code doesn't handle touch events.

* üëÜ Touch events
:PROPERTIES:
:CUSTOM_ID: touch-events
:END:

Mouse events use =mousedown=, =mouseup=, =mousemove=. Touch events instead use =touchstart=, =touchend=, =touchmove=. They behave a little differently. Touch events automatically /capture/ on =touchstart= and direct all =touchmove= events to the original element. This means we /don't/ have to temporarily put an event handler on =document=. We can go back to the simpler logic in the first mouse example. If for any reason the browser needs to cancel the touch sequence, it sends =touchcancel=.

#+begin_src dot :file build/touch.svg :exports results
digraph {
    node [fontname=Helvetica, fontsize=12, shape=circle, style=filled, color="#aaaaaa", fillcolor="#eeeeee"];
    edge [fontname=Courier, fontsize=10, fontcolor="#444422", color="#999999", fillcolor="#ffffff"];
    
    rankdir=LR;
    initial -> initial [label = "touchmove"];
    initial -> dragging [label = "touchstart"];
    dragging -> dragging [label = "touchmove"];
    dragging -> initial [label = "touchend"];
    dragging -> initial [label = "touchcancel"];
}
#+end_src

#+results[c21ec827fee2ef766513f11db71221e50642a3c8]:
[[file:build/touch.svg]]

#+begin_export html
<pre data-code="touch" />
#+end_export

*Try* the demo with a touch device:

#+begin_export html
<figure id="diagram-touch-events" class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Drag using touch events</figcaption>
</figure>
#+end_export

This code doesn't handle mouse events.

* üñ±Ô∏èüëÜ Pointer events
:PROPERTIES:
:CUSTOM_ID: pointer-events
:END:

#+begin_export html
<details>
<summary>Handling both mouse and touch events requires lots of event handlers, and that's what I used before 2021. Details‚Üí</summary>
<p>
From 2011 to 2014 I used <a href="https://github.com/d3/d3-drag">d3-drag</a> in projects where I used d3. For my non-d3 projects, I ended up developing my own mouse+touch code, which I wrote about <a href="/x/1845-draggable/">in 2018</a>.
</p>

<p>
By 2012 MS IE had added support for <a href="https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events">pointer events</a> which unify and simplify mouse+touch handling. <a href="https://caniuse.com/pointer">Chrome added support in 2017; Firefox in 2018; Safari in 2020</a>.
</p>

<p>
Over the years browsers have changed the rules, including in 2017 when
<a href="https://developer.chrome.com/blog/scrolling-intervention/">Chrome changed some events to default to passive mode</a> which causes the page to scroll while trying to drag the object. This <a href="https://github.com/WICG/interventions/issues/18#issuecomment-276531695">broke some pages</a>. Safari <a href="https://github.com/WICG/interventions/issues/18#issuecomment-368703063">made this change in 2018</a>. Firefox also <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1449268">made this change in 2018</a>.
</p>
</details>
#+end_export

#+begin_src dot :file build/mouse-and-touch.svg :exports results
digraph {
    node [fontname=Helvetica, fontsize=12, shape=circle, style=filled, color="#aaaaaa", fillcolor="#eeeeee"];
    edge [fontname=Courier, fontsize=10, fontcolor="#444422", color="#999999", fillcolor="#ffffff"];
    
    rankdir=LR;
    initial -> dragging [label = "mousedown"];
    dragging -> dragging [label = "document\nmousemove"];
    dragging -> initial [label = "document\nmouseup"];
    initial -> initial [label = "touchmove"];
    initial -> dragging [label = "touchstart"];
    dragging -> dragging [label = "touchmove"];
    dragging -> initial [label = "touchend"];
    dragging -> initial [label = "touchcancel"];
}
#+end_src

#+results[ebfb20a7876c5caa28f66545f4c1bfb0fb026007]:
[[file:build/mouse-and-touch.svg]]

Pointer events attempt to unify mouse and touch events. The [[https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture][pointer capture]] feature lets us use the simpler logic that doesn't require us to add/remove global event handlers to the document like we had to with mouse events.

#+begin_src dot :file build/pointer.svg :exports results
digraph {
    node [fontname=Helvetica, fontsize=12, shape=circle, style=filled, color="#aaaaaa", fillcolor="#eeeeee"];
    edge [fontname=Courier, fontsize=10, fontcolor="#444422", color="#999999", fillcolor="#ffffff"];
    
    rankdir=LR;
    initial -> initial [label = "pointermove"];
    initial -> dragging [label = "pointerdown"];
    dragging -> dragging [label = "pointermove"];
    dragging -> initial [label = "pointerup"];
    dragging -> initial [label = "pointercancel"];
}
#+end_src

#+results[b49c70a53e869d89d167a8d9d477b40c561de00e]:
[[file:build/pointer.svg]]

This recipe is the starting point:

#+begin_export html
<pre data-code="pointer" />
#+end_export

Much simpler! However, I almost always want to handle some extras, so I start with this instead:

#+begin_export html
<pre data-code="pointer" data-highlight="capture noscroll left offset" />
#+end_export

*Try* the demo with either a mouse or touch device:

#+begin_export html
<figure id="diagram-pointer-events" class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Drag using pointer events</figcaption>
</figure>
#+end_export

Let's look at each of the extras.

** üñ±Ô∏è Fix: capture the mouse
:PROPERTIES:
:CUSTOM_ID: fix-capture
:END:

The pointer capture feature lets us track the pointer even when it's not on the circle, the diagram, or even the browser window. With mouse events we had to put event handlers on =document=, but pointer capture is simpler.

| Try this                                   | Watch for  | Circle 1 | Circle 2 |
|--------------------------------------------+------------+----------+----------|
| drag quickly back and forth                | drag stops | yes ‚õå   | no ‚úì    |
| drag outside diagram, come back in         | drag stops | yes ‚õå   | no ‚úì    |
| drag outside diagram, let go               | drag stops | no ‚õå    | yes ‚úì   |
| drag outside diagram, let go, come back in | drag stops | no ‚õå    | yes ‚úì   |
| drag, alt+tab to another window            | drag stops | no ‚õå    | yes ‚úì   |

#+begin_export html
<figure id="diagram-capture" class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Dragging without and with pointer capture</figcaption>
</figure>
#+end_export

*Try* this demo with a mouse. 

- Circle 1 doesn't use pointer capture on mouse. Pointer capture is the default on touch devices.
- Circle 2 uses pointer capture on both mouse and touch devices.

#+begin_export html
<pre data-code="pointer" data-show="noscroll left offset" data-highlight="capture" />
#+end_export

** üëÜ Fix: scrolling with touch
:PROPERTIES:
:CUSTOM_ID: fix-scroll
:END:

On touch devices, single-finger drag will scroll the page. But single-finger drag /also/ drags the circle. By default, it will do /both/! The simplest fix is to add CSS ~touch-action: none~ on the diagram. But this prevents scrolling /anywhere/ in the diagram:

#+begin_export html
<figure id="diagram-touch-action-all" class="w-full">
  <svg viewBox="-330 -50 660 100" class="touch-none">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-slashes)" />
  </svg>
  <figcaption>Stop touch from scrolling anywhere on the diagram</figcaption>
</figure>
#+end_export

*Try* dragging the circle on a touch device. It shouldn't scroll. But then try scrolling by dragging the diagram. It doesn't scroll either, but I want it to. I want to stop scrolling /only/ if dragging the circle, not when dragging the diagram.

| Try this     | Watch for    | Circle 1 | Circle 2 | Circle 3 | Circle 4 |
|--------------+--------------+------------+----------+----------+----------|
| drag circle  | page scrolls | no ‚úì      | yes ‚õå   | yes ‚õå   | no ‚úì    |
| drag diagram | page scrolls | no ‚õå      | yes ‚úì   | yes ‚úì   | yes ‚úì   |

#+begin_export html
<figure id="diagram-touch-action" class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Dragging affects scrolling</figcaption>
</figure>
#+end_export

*Try* these on a touch device. 

- Circle 1 (~touch-action: none~ on the diagram) stops scrolling on the circle and also on the diagram.
- Circle 2 (default) doesn't stop scrolling on either. 
- Circle 3 (~touch-action: none~ on the circle only) behaves badly. It looks like the CSS has to be on the diagram to have an effect; applying it only to the circle is not enough. 
- Circle 4 (~.preventDefault()~ on =touchstart=) behaves the way I want, and this is the code for it:

#+begin_export html
<pre data-code="pointer" data-show="capture left offset" data-highlight="noscroll" />
#+end_export

I use the ~.preventDefault()~ solution. Note that it needs to be on =touchstart=, not on =pointerstart=.

** üñ±Ô∏è Feature: handle drag offset
:PROPERTIES:
:CUSTOM_ID: feature-offset
:END:

This isn't necessary but it makes dragging feel nicer. If you pick up the edge of an object then you want to keep holding it at /that/ point, not from the center of the object. The solution is to remember where the center is relative to where the drag started. Then when moving the object, add that offset back in.

| Try this                 | Watch for    | Circle 1 | Circle 2 |
|--------------------------+--------------+----------+----------|
| drag from edge of circle | circle jumps | yes ‚õå   | no ‚úì    |

#+begin_export html
<figure id="diagram-offset" class="w-full">
  <svg viewBox="-200 -60 400 120">
    <rect x="-200" y="-60" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Dragging feels better if relative to the initial pickup point</figcaption>
</figure>
#+end_export

*Try* with the mouse: drag the circle from the edge. Watch Circle 1 jump whereas Circle 2 does not. The same effect happens on touch devices but your finger might hide the jump. The fix is to change the =dragging= state from =true= / =false= to the relative position where the object was picked up, and then use that offset when later setting the position:

#+begin_export html
<pre data-code="pointer" data-show="capture left noscroll" data-highlight="offset" />
#+end_export

Tracking the offset makes dragging feel better. I've also written about this [[href:/making-of/little-things/#drag-point][on my page about little details]].

** üñ±Ô∏è Fix: context menu
:PROPERTIES:
:CUSTOM_ID: fix-contextmenu
:END:

Context menus are different across platforms, and that makes handling it tricky. I want to allow context menus without them interfering with dragging the circle.

| System  | Activation                             |
|---------+----------------------------------------|
| Windows | right click (down+up), ~Shift~ + ~F10~ key |
| Linux   | right button down, ~Shift~ + ~F10~ key     |
| Mac     | right button down, ~Ctrl~ + left click   |
| iOS     | long press on text only                |
| Android | long press on anything                 |

One problem is that I will see a =pointerdown= event and only /sometimes/ a =pointerup= event. That means I might think the button is still down when it's not. It's frustrating! I realized that I should only set the dragging state on /left/ mouse button, and ignore the right mouse button. Then I don't have to worry about most of the differences.

#+begin_export html
<details>
<summary>I made some notes during testing, but most of them don't matter for my use case.</summary>
#+end_export

Across platforms, it looks like Firefox lets the page see events outside the menu overlay, whereas Chrome doesn't let the page see any events while the menu is up.

Windows, right click, no capture:

- Firefox, Chrome, Edge :: =pointerdown=, =pointerup=, =auxclick=, =contextmenu=

Windows, right click, capture:

- Firefox :: =pointerdown=, =gotpointercapture=, =pointerup=, =lostpointercapture=, =auxclick=, =contextmenu=
- Chrome, Edge :: =pointerdown=, =gotpointercapture=, =pointerup=, =auxclick=, =lostpointercapture=, =contextmenu=

Linux right click, no capture:

- Firefox :: =pointerdown=, =contextmenu=, =pointermove= while menu is up
- Chrome :: =pointerdown=, =contextmenu=, no =pointermove= while menu is up

Linux hold right down, no capture:

- Firefox :: =pointerdown=, =contextmenu=, =pointermove= while menu is up
- Chrome :: =pointerdown=, =contextmenu=, no =pointermove= while menu is up

Linux right click, capture:

- Firefox :: =pointerdown=, =contextmenu=, =gotpointercapture=, =pointermove= while menu is up tells us button released
- Chrome :: =pointerdown=, =contextmenu=, =gotpointercapture=; not until another click do we get =pointerup=, =lostpointercapture=

Linux hold right down, capture:

- Firefox :: =pointerdown=, =contextmenu=, =gotpointercapture=, =pointermove= while menu is up tells us button released; when releasing button, menu stays up but we get =pointerup=, =lostpointercapture=
- Chrome :: =pointerdown=, =contextmenu=, =gotpointercapture=, no =pointermove= while menu is up; when releasing button, menu stays up but we don't get =pointerup=; not until another click do we get =pointerup=, click, =lostpointercapture=

Mac, ctrl + left click:

- Firefox :: =pointermove= with buttons‚â†0, =contextmenu= (no =pointerdown= or =pointerup=)
- Chrome :: =pointerdown= with button=left, =contextmenu= (no =pointerup=)
- Safari :: =pointerdown= with button=left, =contextmenu= (no =pointerup=); but subsequent clicks only fire =contextmenu=

Mac, right button down:

- Firefox :: =pointerdown= with button=right, =contextmenu= (no =pointerup=)
- Chrome :: =pointerdown= with button=right, =contextmenu= (no =pointerup=)
- Safari :: =pointerdown= with button=right, =contextmenu= (no =pointerup=); but subsequent right clicks only fire =contextmenu=

If we capture events on =pointerdown=, Firefox and Safari will keep the capture even after the button is released. Chrome will keep capture until you move the mouse, and then it will release capture. [This seems like a Firefox/Safari bug to me, as pointer capture is supposed to be automatically released on mouse up]

It's frustrating that on Mac, there's no =pointerup= or =pointercapture= when releasing the mouse button. On Linux, the =pointerup= only shows up if you click to exit the context menu. It doesn't show up if you press ~Esc~ to exit. The workaround is to watch =pointermove= events to see when no buttons are set. Windows doesn't seem to have these issues, as both =pointerdown= and =pointerup= are delivered before the context menu.

Android, long press:

- Firefox :: =pointerdown=, get capture, =contextmenu=, =pointerup=, lose capture
- Chrome :: =pointerdown=, get capture, =contextmenu=, =pointerup= or =pointercancel= (if the finger moves at all, this starts a scroll event which cancels the captured pointer), lose capture

What are my options?

- [[https://www.w3.org/TR/pointerevents/#the-pointerdown-event][The spec says about pointerdown]] that =preventDefault()=  /not/ stop click or =contextmenu= events. I can =preventDefault()= on =contextmenu= to prevent the menu. But I still want to get =pointerup= and/or =pointercancel=! I think I have to treat =contextmenu= as the up event which means I'll get multiple up events on Windows.

- [[https://w3c.github.io/pointerevents/#the-button-property][The spec says about the button property]] that =button= = 0 indicates the primary button. This is how I will exclude the middle and right buttons. But I still get a =pointerdown.left= on Mac/Chrome and Mac/Safari (but not on Mac/Firefox) so I also have to check for the ~Ctrl~ key.

- Button changes not communicated through =pointerdown= or =pointerup= can still be sent on =pointermove=. It's mentioned as a workaround on [[https://github.com/w3c/pointerevents/issues/408][W3C's pointerevents issues page]].

#+begin_export html
</details>
#+end_export


| Try this                   | Watch for         | Circle 1 | Circle 2 | Circle 3 | Circle 4 |
|----------------------------+-------------------+----------+----------+----------+----------|
| right click      | circle turns blue | yes ‚õå   | yes      | no ‚úì    | no ‚úì    |
| right click      | context menu      | yes ‚õå   | no       | no ‚úì    | no ‚úì    |
| middle click     | circle turns blue | yes ‚õå   | yes ‚õå   | no ‚úì    | no ‚úì    |
| right drag       | circle is blue    | yes ‚õå   | yes      | no ‚úì    | no ‚úì    |
| middle drag      | circle is blue    | yes ‚õå   | yes      | no ‚úì    | no ‚úì    |
| ctrl+click (mac) | circle turns blue¬π | yes ‚õå   | no ‚úì    | yes ‚õå   | no ‚úì    |
| ctrl+click (mac) | context menu      | yes ‚õå   | no ‚úì    | yes ‚õå   | no ‚úì    |

¬π it will turn blue in Chrome and Safari but not in Firefox, which treats ~Ctrl~ + click differently

#+begin_export html
<figure id="diagram-contextmenu" class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Right mouse button down interferes with drag</figcaption>
</figure>
#+end_export

*Try* with the mouse: right click or drag on the circles. Try dismissing the menu with a click elsewhere, or by pressing ~Esc~.  Behavior varies across browsers and operating systems.

- Circle 1 sometimes get stuck in a dragging state. 
- Circle 2 uses ~.preventDefault()~ on =contextmenu=. This allows the right button to be used for dragging. However, it interferes with the default operation of middle click or drag, which is used for scrolling on some systems.
- Circle 3 drags only with the left button, but on Mac ~Ctrl~ + click on Chrome/Safari will trigger drag.
- Circle 4 drags only with the left button, if ~Ctrl~ isn't pressed.

#+begin_export html
<pre data-code="pointer" data-show="capture noscroll" data-highlight="left noctrl" />
#+end_export

* üñ±Ô∏è Variant: draggable text/images
:PROPERTIES:
:CUSTOM_ID: variant-text
:END:

These changes are needed if you have text or images inside your draggable element:

#+begin_export html
<pre data-code="pointer" data-show="capture noscroll left offset" data-highlight="noselect nosystemdrag"/>
#+end_export


** üñ±Ô∏è Fix: text selection
:PROPERTIES:
:CUSTOM_ID: fix-user-select
:END:

When dragging the circle, the text inside gets selected sometimes. To fix this, use CSS ~user-select: none~ on the circle. There are two choices: either we can apply it /all/ the time, or apply it /only/ while dragging. If I apply it all the time, then the text won't ever be selectable.

| Try this        | Watch for        | Circle 1 | Circle 2 | Circle 3 |
|-----------------+------------------+----------+----------+----------|
| drag circle     | text is selected | yes ‚õå   | no ‚úì    | no ‚úì    |
| select all text | text is selected | yes     | no       | yes     |

#+begin_export html
<figure id="diagram-text-select" class="w-full">
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Dragging affects text selection</figcaption>
</figure>
#+end_export

*Try* dragging Circle 1 with the mouse a few times and you'll see sometimes the text gets selected. With touch devices, long press can select the text. Both Circle 2 and Circle 3 do not have that problem. *Try* selecting all text on the page to see the difference between Circle 2 and Circle 3; either behavior is a reasonable choice. The code I show here applies only while dragging (Circle 3's behavior):

** üñ±Ô∏è Fix: text and image drag
:PROPERTIES:
:CUSTOM_ID: fix-systemdrag
:END:

Windows, Linux, and Mac support inter-application /drag and drop/ of text and images, and an alternative to copy/paste. This interferes with the object dragging on my pages. The fix is to ~preventDefault()~ on =dragstart=.

| Try this                 | Watch for       | Circle 1 | Circle 2 |
|--------------------------+-----------------+----------+----------|
| select text, drag circle | page text drags | yes ‚õå    | no ‚úì    |

#+begin_export html
<figure id="diagram-systemdrag" class="w-full">
  <div><b>Select text</b> ‚Üí <tt>[from here</tt></div>
  <svg viewBox="-330 -50 660 100">
    <rect x="-330" y="-50" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <div><tt>to here]</tt> ‚Üê</div>
  <figcaption>Selected text interferes with dragging</figcaption>
</figure>
#+end_export

*Try* this demo with a mouse.
@@html:<button onclick="diagramSystemDragSetSelection()">Select the text</button>@@
around the diagram, then drag Circle 1. On most desktop systems I've tested, text or image dragging takes priority over the circle dragging by default. Circle 2 prioritizes the circle dragging. Behavior varies a little bit across browsers and operating systems. The fix is one extra line:

* More cases
:PROPERTIES:
:CUSTOM_ID: more-cases
:END:


** üëÜ Feature: simultaneous dragging
:PROPERTIES:
:CUSTOM_ID: feature-simultaneous-dragging
:END:

I think this is an edge case, but I was curious what it would take to support. Can we drag multiple objects at once, using different fingers or different mice?

For touch, the code I presented should already work! Go back to one of the previous demos and try it. However the code doesn't handle using two fingers to drag the /same/ object. The fix is when handling =pointerdown=, save ~event.pointerId~ to =state.dragging=. Then when handling =pointermove=, ignore the even if it's not the same =pointerId=. I don't have that implemented here, but try it out [[href:tests.html#test-2d-canvas-drag-a-handle][on my canvas dragging test]].

#+begin_export html
<pre data-code="pointer" data-show="capture noscroll left offset" data-highlight="pointerid" />
#+end_export


What about mice? The [[https://www.w3.org/TR/pointerevents/#the-primary-pointer][Pointer Events spec]] says

#+begin_quote
Current operating systems and user agents don't usually have a concept of multiple mouse inputs. When more than one mouse device is present (for instance, on a laptop with both a trackpad and an external mouse), all mouse devices are generally treated as a single device - movements on any of the devices are translated to movement of a single mouse pointer, and there is no distinction between button presses on different mouse devices. For this reason, there will usually only be a single mouse pointer, and that pointer will be primary.
#+end_quote

I think there isn't any way to drag different objects with different mice.

** üñ±Ô∏è Edge case: chorded button presses
:PROPERTIES:
:CUSTOM_ID: fix-chords
:END:

So here's a tricky one. If you are using multiple buttons at the same time, what happens? Mouse Events send =mousedown= for each button press and =mouseup= for each button release. But Pointer Events work differently. The [[https://www.w3.org/TR/pointerevents/#chorded-button-interactions][Pointer Events spec]] says that the /first/ button that was pressed leads to a =pointerdown= event, and the /last/ one that was released leads to a =pointerup= event. But that means we might get a up event on a different button than the down event!

#+begin_src dot :cmd circo :file build/multiple-buttons.svg :exports results
digraph {
    node [fontname=Helvetica, fontsize=12, shape=circle, style=filled, color="#aaaaaa", fillcolor="#eeeeee"];
    edge [fontname=Courier, fontsize=10, fontcolor="#444422", color="#999999", fillcolor="#ffffff"];

    neither;
    leftbutton [label = "left\nbutton"];
    rightbutton [label = "right\nbutton"];
    bothbuttons [label = "both\nbuttons"];

    neither -> leftbutton [label = "pointerdown\nleft"];
    neither -> rightbutton [label = "pointerdown\nright"];
    leftbutton -> neither [label = "pointerup\nleft"];
    leftbutton -> bothbuttons [label = "pointermove"];
    rightbutton -> neither [label = "pointerup\nright"];
    rightbutton -> bothbuttons [label = "pointermove"];
    bothbuttons -> leftbutton [label = "pointermove"];
    bothbuttons -> rightbutton [label = "pointermove"];
}
#+end_src

#+results[974b4e4064456c061ab84975906795dca1a33cc5]:
[[file:build/multiple-buttons.svg]]

| Try this                                 | Watch for | Circle 1 | Circle 2 |
|------------------------------------------+-----------+----------+----------|
| left down, right down, left up           | dragging  | yes ‚õå    | no ‚úì    |

#+begin_export html
<figure id="diagram-chords" class="w-full">
  <svg viewBox="-250 -60 500 120">
    <rect x="-250" y="-60" width="100%" height="100%" fill="url(#pattern-dots)" />
  </svg>
  <figcaption>Multiple button presses is tricky</figcaption>
</figure>
#+end_export

*Try* with the mouse: press the left button, press the right button (this may bring up a context menu but ignore it), then release the left button. Is the circle still dragging?

The fix is to check the button state in =pointermove=:

#+begin_export html
<pre data-code="pointer" data-show="capture noscroll left offset" data-highlight="chords" />
#+end_export

Separately, the /pointer capture/ continues until you release /all/ the buttons, unless you explicitly release capture. I'm not handling this or many other edge cases.

** üñ±Ô∏èüëÜ Variant: nested dragging
:PROPERTIES:
:CUSTOM_ID: variant-nesting
:END:

If the draggable element contains /another/ draggable element inside of it, both elements will handle the dragging. The fix is to add ~.stopPropagation()~ to prevent the inner draggable from passing events up to outer draggable. I don't have a demo here, but [[https://sfc.vuejs.org/#eNq1VU1zmzAQ/StbJjPYUxs7V+p02mkvveXQQzLDIdisQSlIGknYUMp/7wpBCo4b99M+oH37Vuy+XaTGey9lcCjRC72N3ikmDWg0pXwbcVZIoQw0oHAPLeyVKMAnqh/xiO8E1wYquLHe2Xo+IPUz5MgSk/Xo9foHniFLMzNxDK5ExSk5mohDt04ZT0PYx7nGhcWkYNygSsSRz/CA3MwdF8BkTAdDiN0iqUKogkOclwhL6MjBLmf0uFtAUodQn3Xet2/chj1YKkXPz7FK0QQk0K3L4EMsTanQJRH0aX1K5l1wO861lBcy7ap7HleIQ7/9UyTbw+zVJHxOGlIevM95qPdmWi+8nr40SKo+YNBgGnD/PKB+SrAdeqVQs6829J906xi6eflpx7KwH5z/1rYhWBshb5WQcRobJvjs75r6G7v+Sctf2hwmkl4cimMfNJH54mRk48nYrNxRQocIGQYLmccGyQLYJOwAoTZ1jjeR1xgVc70XqgjhoVtb4uyqqVpZLa6amh7zh4UrgChXTbcilECXYIe6pYO38e5LqkTJkxD8GvNcHP0F+KVGtdSY48745OCCI8FSaGalIkQhvZsdLEpzo4UizLbCbyPPKUK/d6NhDnLcGyrCijAMkcXP0Et5wivlGZZ92wnPQiNmJyHAR3s+FgiNk+Pbum3vml4EazjWidSjUuOtFnlpbKnKaeivab0VxgjqRGf0kvvXa1mROYg92BOVFSZj1fhR49KdCxfFc7RfkW/KfEnAKfNEwicRNyvSx81kv9qsRqPq/t7Cc9fgsohl8KgFp4uy+yij3qEjLxw+08ij69HakZcZI3W4Wun9zl6vjzoQKl3RKlAlN6zAAHWx3CpBWina2GVInWu99ju1AZkh][I made one elsewhere]], where the red draggable is a child of the yellow draggable.

#+begin_export html
<pre data-code="pointer" data-show="capture noscroll left offset" data-highlight="nopropagate" />
#+end_export


** üñ±Ô∏èüëÜ Variant: dragging on canvas
:PROPERTIES:
:CUSTOM_ID: variant-canvas
:END:

I normally work with SVG, but if working with a =<canvas>= (either 2D Canvas or WebGL), I can't set the event handlers or mouse pointer shape on the /draggable/ element only. So I set the event handler on the =<canvas>= and then:

1. =pointerdown=, =touchstart=, =dragstart=: early ~return~ if not over a draggable object
2. =pointermove=: set the cursor based on whether it's over a draggable object

** Variant: hover with mouse
:PROPERTIES:
:CUSTOM_ID: variant-hover
:END:

Sometimes I want to act on /hover/ with the mouse (no buttons pressed) but that doesn't work with touch devices, so I use /drag/ with touch. I modify the recipe by removing the ~if (!state.dragging)~ line from =pointermove=.

{ DEMO? }

Do I need to release the capture?

* Vue version
:PROPERTIES:
:CUSTOM_ID: vue
:END:

I haven't made a fully reusable Vue component yet but this is partway there:

#+begin_src xml
<template>
  <g
    :transform="`translate(${pos.x},${pos.y})`"
    @pointerdown.left="start"
    @pointerup="end" @pointercancel="end"
    @pointermove="dragging ? move($event) : null"
    @touchstart.prevent="" @dragstart.prevent="">
    :class="{dragging}"
    <slot />
  </g>
</template>

<style>
  g { cursor: grab; }
  g.dragging { user-select: none; cursor: grabbing; }
</style>

<script setup>
// pos is a prop {x: y:}

const dragging = ref(false);

function start(event) {
  if (event.ctrlKey) return;
  let {x, y} = convertPixelToSvgCoord(event);
  dragging.value = {dx: pos.x - x, dy: pos.y - y};
  el.setPointerCapture(event.pointerId);
}

function end(event) {
  dragging.value = null;
}

function move(event) {
  let {x, y} = convertPixelToSvgCoord(event);
  $emit('move', {
    x: x + dragging.value.dx,
    y: y + dragging.value.dy,
  });
}
</script>
#+end_src

* Notes - event log

[[href:eventlog.html][eventlog.html]]

* Dragging different types of objects

[[href:tests.html][tests.html]]


#+begin_export html
<style>
  main svg { 
    max-width: 90%;
    background: #eee; 
    box-shadow: 0 1px 3px 1px rgb(0 0 0 / 0.3);
    width: calc(1.2 * var(--body-width)); 
  }

  main pre {
    /* some of my code is slightly too wide for my default width */
    width: calc(1.1 * var(--body-width));
  }

  details { padding: 0 1em; }
  details p, details dl { margin: 0.5em; padding: 0 1em; }
  details[open] { 
    background: linear-gradient(to right, hsl(200 10% 95%), white);
    border: 2px solid hsl(200 10% 70%); 
    border-right-width: 0; 
  }

  /* don't want to get bogged down in details for some diagrams */
  :is(#diagram-mouse-events-local,#diagram-mouse-events-document,#diagram-touch-events) text { user-select: none; }

  /* tailwind inspired */
  .select-none { user-select: none; }
  .touch-none { touch-action: none; }

  /* Prism.js theme, want to use mostly subdued colors */
  .token.operator { font-weight: bold; }
  .token.parameter { font-weight: bold; }
  .token.punctuation, .token.parameter .token.punctuation { color: #c9c9c4; }
  .token.keyword { color: hsl(220 20% 50%); font-weight: bold; }
  .token.keyword + .token.function { color: hsl(220 50% 50%); font-weight: bold; }
  .token.number { color: #000; }
  .token.string { color: #888; }
  /* I also want to highlight certain lines */
  .highlight { background: hsl(180 75% 90%); }
</style>

<x:footer>
  <svg width="0" height="0">
    <defs>
      <pattern id="pattern-dots" width="10" height="10" patternUnits="userSpaceOnUse">
        <circle cx="5" cy="5" fill="hsl(0 10% 80%)" r="1" />
      </pattern>
      <pattern id="pattern-slashes" width="7" height="7" patternUnits="userSpaceOnUse" patternTransform="rotate(30 0 0)">
        <line y2="7" fill="none" stroke="hsl(0 10% 80%)" stroke-width="1" />
      </pattern>
    </defs>
  </svg>
  <!-- https://prismjs.com/download.html#themes=prism&languages=clike+javascript -->
  <script src="build/prism.js"></script>
  <script type="module" src="draggable.js"></script>

  Created 23 Dec 2022
  with the help of
  <a href="https://prismjs.com/">Prism.js</a>; &#160;
  <!-- hhmts start -->Last modified: 19 Feb 2023<!-- hhmts end -->
</x:footer>
#+end_export
